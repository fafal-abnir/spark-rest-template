/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package coyote

import com.xenomachina.argparser.ArgParser
import coyote.config.ArgumentParser
import coyote.config.CoreConfig
import coyote.config.get
import mu.KotlinLogging
import java.net.InetSocketAddress

private val logger = KotlinLogging.logger { }

fun main(args: Array<String>) {

    val parsedArgs = ArgParser(args).parseInto(::ArgumentParser)
    logger.info("Running program with mode --setup ${parsedArgs.setup}")
    logger.info("Running program with mode --ignore-sync ${parsedArgs.ignoreSync}")
    System.setProperty(org.slf4j.impl.SimpleLogger.DEFAULT_LOG_LEVEL_KEY, "info")
    if (parsedArgs.setup) {
        logger.warn("Running --setup for updating databases with ExposedDAO.")
        //TODO(Add specific -setup)
    }
    try {
        val service = ProxyService(InetSocketAddress("0.0.0.0", CoreConfig.Api.port.get), workers = Runtime.getRuntime().availableProcessors() * CoreConfig.Api.threads.get)

        Runtime.getRuntime().addShutdownHook(object : Thread() {
            override fun run() {
                logger.error("Shutdown Hook is called! Stopping service....")
                service.stop()
                logger.error("Service is stopped!")
            }
        })
        service.run()
    } catch (e: Exception) {
        e.printStackTrace()
    }
}
